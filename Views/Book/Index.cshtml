@model IEnumerable<LibraryFinalsProject.ViewModels.BookViewModel>

@{
    ViewData["Title"] = "Books List";
}

<h1>@ViewData["Title"]</h1>

<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#bookModal">
    Add Book
</button>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Category</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        @foreach (var book in Model)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.CategoryName</td>
                <td>
                    <button class="btn btn-info btn-sm" data-toggle="modal" data-target="#detailsBookModal" data-id="@book.Id">Details</button>
                    <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editBookModal" data-id="@book.Id">Edit</button>
                    <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteBookModal" data-id="@book.Id">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Add Book Modal -->
<div class="modal fade" id="bookModal" tabindex="-1" role="dialog" aria-labelledby="bookModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookModalLabel">Add New Book</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="bookForm">
                    <div class="form-group">
                        <label for="bookTitle">Title</label>
                        <input type="text" class="form-control" id="bookTitle" name="Title" placeholder="Enter book title" required>
                    </div>
                    <div class="form-group">
                        <label for="bookAuthor">Author</label>
                        <input type="text" class="form-control" id="bookAuthor" name="Author" placeholder="Enter book author" required>
                    </div>
                    <div class="form-group">
                        <label for="bookCategory">Category</label>
                        <select class="form-control" id="bookCategory" name="CategoryId" required>
                            @foreach (var category in ViewBag.Categories as List<LibraryFinalsProject.Models.Category>)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveBookButton">Save changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Book Modal -->
<div class="modal fade" id="editBookModal" tabindex="-1" role="dialog" aria-labelledby="editBookModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editBookForm">
                    <input type="hidden" id="editBookId" name="Id">
                    <div class="form-group">
                        <label for="editBookTitle">Title</label>
                        <input type="text" class="form-control" id="editBookTitle" name="Title" placeholder="Enter book title" required>
                    </div>
                    <div class="form-group">
                        <label for="editBookAuthor">Author</label>
                        <input type="text" class="form-control" id="editBookAuthor" name="Author" placeholder="Enter book author" required>
                    </div>
                    <div class="form-group">
                        <label for="editBookCategory">Category</label>
                        <select class="form-control" id="editBookCategory" name="CategoryId" required>
                            @foreach (var category in ViewBag.Categories as List<LibraryFinalsProject.Models.Category>)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="updateBookButton">Update</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Book Modal -->
<div class="modal fade" id="deleteBookModal" tabindex="-1" role="dialog" aria-labelledby="deleteBookModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteBookModalLabel">Delete Book</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="deleteBookButton">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Book Details Modal -->
<div class="modal fade" id="detailsBookModal" tabindex="-1" role="dialog" aria-labelledby="detailsBookModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsBookModalLabel">Book Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="detailsBookTitle">Title</label>
                    <input type="text" class="form-control" id="detailsBookTitle" readonly>
                </div>
                <div class="form-group">
                    <label for="detailsBookAuthor">Author</label>
                    <input type="text" class="form-control" id="detailsBookAuthor" readonly>
                </div>
                <div class="form-group">
                    <label for="detailsBookCategory">Category</label>
                    <input type="text" class="form-control" id="detailsBookCategory" readonly>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            // Handle Add Book
            $('#saveBookButton').click(function () {
                var formData = $('#bookForm').serialize();

                $.ajax({
                    url: '@Url.Action("Create", "Book")',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        if (result.success) {
                            // Reload the book list
                            $.ajax({
                                url: '@Url.Action("Index", "Book")',
                                type: 'GET',
                                success: function (data) {
                                    var $newTableBody = $(data).find('#booksTableBody');
                                    $('#booksTableBody').html($newTableBody.html());
                                }
                            });
                            // Close the modal
                            $('#bookModal').modal('hide');
                        } else {
                            alert('Failed to save book: ' + result.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

            // Handle Edit Book
            $('#editBookModal').on('show.bs.modal', function (e) {
                var button = $(e.relatedTarget); // Button that triggered the modal
                var Id = button.data('id'); // Extract info from data-* attributes

                $.ajax({
                    url: '@Url.Action("Edit", "Book")',
                    type: 'GET',
                    data: { id: Id },
                    success: function (result) {
                        if (result.success) {
                            $('#editBookId').val(result.book.Id);
                            $('#editBookTitle').val(result.book.Title);
                            $('#editBookAuthor').val(result.book.Author);
                            $('#editBookCategory').val(result.book.CategoryId);
                        } else {
                            alert('Failed to load book data.');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

            $('#updateBookButton').click(function () {
                var formData = $('#editBookForm').serialize();

                $.ajax({
                    url: '@Url.Action("Edit", "Book")',
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        if (result.success) {
                            // Reload the book list
                            $.ajax({
                                url: '@Url.Action("Index", "Book")',
                                type: 'GET',
                                success: function (data) {
                                    var $newTableBody = $(data).find('#booksTableBody');
                                    $('#booksTableBody').html($newTableBody.html());
                                }
                            });
                            // Close the modal
                            $('#editBookModal').modal('hide');
                        } else {
                            alert('Failed to update book: ' + result.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

            // Handle Delete Book
            $('#deleteBookModal').on('show.bs.modal', function (e) {
                var button = $(e.relatedTarget); // Button that triggered the modal
                var Id = button.data('id'); // Extract info from data-* attributes
                $('#deleteBookButton').data('id', Id);
            });

            $('#deleteBookButton').click(function () {
                var Id = $(this).data('id');

                $.ajax({
                    url: '@Url.Action("Delete", "Book")',
                    type: 'POST',
                    data: { id: Id },
                    success: function (result) {
                        if (result.success) {
                            // Reload the book list
                            $.ajax({
                                url: '@Url.Action("Index", "Book")',
                                type: 'GET',
                                success: function (data) {
                                    var $newTableBody = $(data).find('#booksTableBody');
                                    $('#booksTableBody').html($newTableBody.html());
                                }
                            });
                            // Close the modal
                            $('#deleteBookModal').modal('hide');
                        } else {
                            alert('Failed to delete book.');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });
            // Handle Book Details
            $('#detailsBookModal').on('show.bs.modal', function (e) {
                var button = $(e.relatedTarget); // Button that triggered the modal
                var Id = button.data('id'); // Extract info from data-* attributes

                $.ajax({
                    url: '@Url.Action("Details", "Books")',
                    type: 'GET',
                    data: { id: Id },
                    success: function (result) {
                        if (result.success) {
                            $('#detailsBookTitle').val(result.book.Title);
                            $('#detailsBookAuthor').val(result.book.Author);
                            $('#detailsBookCategory').val(result.book.CategoryName);
                        } else {
                            alert('Failed to load book details: ' + result.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                    }
                });
            });

        });
    </script>
}
